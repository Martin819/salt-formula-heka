log_collector:
  encoder:
    elasticsearch:
      engine: elasticsearch
      index: "%{Type}-%{%Y.%m.%d}"
  output:
    elasticsearch:
      engine: elasticsearch
      message_matcher: "Type == 'log' || Type  == 'notification'"
      encoder: elasticsearch_encoder
      host: mon
      port: 9200
      flush_interval: 5000
      flush_count: 100
    metric_collector:
      engine: tcp
      host: 127.0.0.1
      port: 5567
    log_dashboard:
      engine: dashboard
      host: 127.0.0.1
      port: 4352
metric_collector:
  decoder:
    heka_collectd:
      engine: sandbox
      module_file: /usr/share/lma_collector/decoders/collectd.lua
      module_dir: /usr/share/lma_collector_modules;/usr/share/heka/lua_modules
      config:
        hostname: '{{ grains.fqdn.split('.')[0] }}'
        swap_size: 4294967296
    heka_http_check:
      engine: sandbox
      module_file: /usr/share/lma_collector/decoders/noop.lua
      module_dir: /usr/share/lma_collector_modules;/usr/share/heka/lua_modules
      config:
        msg_type: lma.http-check
    heka_metric:
      engine: sandbox
      module_file: /usr/share/lma_collector/decoders/metric.lua
      module_dir: /usr/share/lma_collector_modules;/usr/share/heka/lua_modules
      config:
        deserialize_bulk_metric_for_loggers: 'aggregated_http_metrics_filter hdd_errors_counter_filter'
  input: {}
  filter:
    heka_metric_collector:
      engine: sandbox
      module_file: /usr/share/lma_collector/filters/heka_monitoring.lua
      module_dir: /usr/share/lma_collector_modules;/usr/share/heka/lua_modules
      preserve_data: false
      message_matcher: "Type == 'heka.all-report'"
    rabbitmq_service_status:
      engine: sandbox
      module_file: /usr/share/lma_collector/filters/afd.lua
      module_dir: /usr/share/lma_collector_modules;/usr/share/heka/lua_modules
      preserve_data: false
      message_matcher: "(Type == 'metric' || Type == 'heka.sandbox.metric') && (Fields[name] == 'rabbitmq_check')"
      ticker_interval: 10
      config:
        hostname: '{{ grains.fqdn.split('.')[0] }}'
        afd_type: 'service'
        afd_file: 'lma_alarms_rabbitmq_service_check'
        afd_cluster_name: 'rabbitmq-service'
        afd_logical_name: 'check'
        activate_alerting: true
        enable_notification: false
  output: {}
  splitter: {}
  encoder: {}
remote_collector:
  decoder: {}
  input: {}
  filter: {}
  output: {}
  splitter: {}
  encoder: {}
aggregator:
  decoder: {}
  input: {}
  filter: {}
  output: {}
  splitter: {}
  encoder: {}
